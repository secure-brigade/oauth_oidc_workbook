// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"oauth-az/ent/authcode"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// AuthCodeCreate is the builder for creating a AuthCode entity.
type AuthCodeCreate struct {
	config
	mutation *AuthCodeMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (acc *AuthCodeCreate) SetCreatedAt(t time.Time) *AuthCodeCreate {
	acc.mutation.SetCreatedAt(t)
	return acc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (acc *AuthCodeCreate) SetNillableCreatedAt(t *time.Time) *AuthCodeCreate {
	if t != nil {
		acc.SetCreatedAt(*t)
	}
	return acc
}

// SetUpdatedAt sets the "updated_at" field.
func (acc *AuthCodeCreate) SetUpdatedAt(t time.Time) *AuthCodeCreate {
	acc.mutation.SetUpdatedAt(t)
	return acc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (acc *AuthCodeCreate) SetNillableUpdatedAt(t *time.Time) *AuthCodeCreate {
	if t != nil {
		acc.SetUpdatedAt(*t)
	}
	return acc
}

// SetCreateTime sets the "create_time" field.
func (acc *AuthCodeCreate) SetCreateTime(t time.Time) *AuthCodeCreate {
	acc.mutation.SetCreateTime(t)
	return acc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (acc *AuthCodeCreate) SetNillableCreateTime(t *time.Time) *AuthCodeCreate {
	if t != nil {
		acc.SetCreateTime(*t)
	}
	return acc
}

// SetUpdateTime sets the "update_time" field.
func (acc *AuthCodeCreate) SetUpdateTime(t time.Time) *AuthCodeCreate {
	acc.mutation.SetUpdateTime(t)
	return acc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (acc *AuthCodeCreate) SetNillableUpdateTime(t *time.Time) *AuthCodeCreate {
	if t != nil {
		acc.SetUpdateTime(*t)
	}
	return acc
}

// SetValue sets the "value" field.
func (acc *AuthCodeCreate) SetValue(u uuid.UUID) *AuthCodeCreate {
	acc.mutation.SetValue(u)
	return acc
}

// SetClientID sets the "client_id" field.
func (acc *AuthCodeCreate) SetClientID(s string) *AuthCodeCreate {
	acc.mutation.SetClientID(s)
	return acc
}

// SetScopes sets the "scopes" field.
func (acc *AuthCodeCreate) SetScopes(s []string) *AuthCodeCreate {
	acc.mutation.SetScopes(s)
	return acc
}

// SetResponseType sets the "response_type" field.
func (acc *AuthCodeCreate) SetResponseType(s []string) *AuthCodeCreate {
	acc.mutation.SetResponseType(s)
	return acc
}

// SetNonce sets the "nonce" field.
func (acc *AuthCodeCreate) SetNonce(s string) *AuthCodeCreate {
	acc.mutation.SetNonce(s)
	return acc
}

// SetRedirectURI sets the "redirect_uri" field.
func (acc *AuthCodeCreate) SetRedirectURI(s string) *AuthCodeCreate {
	acc.mutation.SetRedirectURI(s)
	return acc
}

// SetExpiry sets the "expiry" field.
func (acc *AuthCodeCreate) SetExpiry(t time.Time) *AuthCodeCreate {
	acc.mutation.SetExpiry(t)
	return acc
}

// SetCodeChallenge sets the "code_challenge" field.
func (acc *AuthCodeCreate) SetCodeChallenge(s string) *AuthCodeCreate {
	acc.mutation.SetCodeChallenge(s)
	return acc
}

// SetNillableCodeChallenge sets the "code_challenge" field if the given value is not nil.
func (acc *AuthCodeCreate) SetNillableCodeChallenge(s *string) *AuthCodeCreate {
	if s != nil {
		acc.SetCodeChallenge(*s)
	}
	return acc
}

// SetCodeChallengeMethod sets the "code_challenge_method" field.
func (acc *AuthCodeCreate) SetCodeChallengeMethod(acm authcode.CodeChallengeMethod) *AuthCodeCreate {
	acc.mutation.SetCodeChallengeMethod(acm)
	return acc
}

// SetNillableCodeChallengeMethod sets the "code_challenge_method" field if the given value is not nil.
func (acc *AuthCodeCreate) SetNillableCodeChallengeMethod(acm *authcode.CodeChallengeMethod) *AuthCodeCreate {
	if acm != nil {
		acc.SetCodeChallengeMethod(*acm)
	}
	return acc
}

// Mutation returns the AuthCodeMutation object of the builder.
func (acc *AuthCodeCreate) Mutation() *AuthCodeMutation {
	return acc.mutation
}

// Save creates the AuthCode in the database.
func (acc *AuthCodeCreate) Save(ctx context.Context) (*AuthCode, error) {
	var (
		err  error
		node *AuthCode
	)
	acc.defaults()
	if len(acc.hooks) == 0 {
		if err = acc.check(); err != nil {
			return nil, err
		}
		node, err = acc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AuthCodeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = acc.check(); err != nil {
				return nil, err
			}
			acc.mutation = mutation
			if node, err = acc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(acc.hooks) - 1; i >= 0; i-- {
			if acc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = acc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, acc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (acc *AuthCodeCreate) SaveX(ctx context.Context) *AuthCode {
	v, err := acc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acc *AuthCodeCreate) Exec(ctx context.Context) error {
	_, err := acc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acc *AuthCodeCreate) ExecX(ctx context.Context) {
	if err := acc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (acc *AuthCodeCreate) defaults() {
	if _, ok := acc.mutation.CreatedAt(); !ok {
		v := authcode.DefaultCreatedAt()
		acc.mutation.SetCreatedAt(v)
	}
	if _, ok := acc.mutation.UpdatedAt(); !ok {
		v := authcode.DefaultUpdatedAt()
		acc.mutation.SetUpdatedAt(v)
	}
	if _, ok := acc.mutation.CreateTime(); !ok {
		v := authcode.DefaultCreateTime()
		acc.mutation.SetCreateTime(v)
	}
	if _, ok := acc.mutation.UpdateTime(); !ok {
		v := authcode.DefaultUpdateTime()
		acc.mutation.SetUpdateTime(v)
	}
	if _, ok := acc.mutation.Value(); !ok {
		v := authcode.DefaultValue()
		acc.mutation.SetValue(v)
	}
	if _, ok := acc.mutation.CodeChallenge(); !ok {
		v := authcode.DefaultCodeChallenge
		acc.mutation.SetCodeChallenge(v)
	}
	if _, ok := acc.mutation.CodeChallengeMethod(); !ok {
		v := authcode.DefaultCodeChallengeMethod
		acc.mutation.SetCodeChallengeMethod(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (acc *AuthCodeCreate) check() error {
	if _, ok := acc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "created_at"`)}
	}
	if _, ok := acc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "updated_at"`)}
	}
	if _, ok := acc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "create_time"`)}
	}
	if _, ok := acc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "update_time"`)}
	}
	if _, ok := acc.mutation.Value(); !ok {
		return &ValidationError{Name: "value", err: errors.New(`ent: missing required field "value"`)}
	}
	if _, ok := acc.mutation.ClientID(); !ok {
		return &ValidationError{Name: "client_id", err: errors.New(`ent: missing required field "client_id"`)}
	}
	if v, ok := acc.mutation.ClientID(); ok {
		if err := authcode.ClientIDValidator(v); err != nil {
			return &ValidationError{Name: "client_id", err: fmt.Errorf(`ent: validator failed for field "client_id": %w`, err)}
		}
	}
	if _, ok := acc.mutation.Nonce(); !ok {
		return &ValidationError{Name: "nonce", err: errors.New(`ent: missing required field "nonce"`)}
	}
	if v, ok := acc.mutation.Nonce(); ok {
		if err := authcode.NonceValidator(v); err != nil {
			return &ValidationError{Name: "nonce", err: fmt.Errorf(`ent: validator failed for field "nonce": %w`, err)}
		}
	}
	if _, ok := acc.mutation.RedirectURI(); !ok {
		return &ValidationError{Name: "redirect_uri", err: errors.New(`ent: missing required field "redirect_uri"`)}
	}
	if v, ok := acc.mutation.RedirectURI(); ok {
		if err := authcode.RedirectURIValidator(v); err != nil {
			return &ValidationError{Name: "redirect_uri", err: fmt.Errorf(`ent: validator failed for field "redirect_uri": %w`, err)}
		}
	}
	if _, ok := acc.mutation.Expiry(); !ok {
		return &ValidationError{Name: "expiry", err: errors.New(`ent: missing required field "expiry"`)}
	}
	if _, ok := acc.mutation.CodeChallenge(); !ok {
		return &ValidationError{Name: "code_challenge", err: errors.New(`ent: missing required field "code_challenge"`)}
	}
	if _, ok := acc.mutation.CodeChallengeMethod(); !ok {
		return &ValidationError{Name: "code_challenge_method", err: errors.New(`ent: missing required field "code_challenge_method"`)}
	}
	if v, ok := acc.mutation.CodeChallengeMethod(); ok {
		if err := authcode.CodeChallengeMethodValidator(v); err != nil {
			return &ValidationError{Name: "code_challenge_method", err: fmt.Errorf(`ent: validator failed for field "code_challenge_method": %w`, err)}
		}
	}
	return nil
}

func (acc *AuthCodeCreate) sqlSave(ctx context.Context) (*AuthCode, error) {
	_node, _spec := acc.createSpec()
	if err := sqlgraph.CreateNode(ctx, acc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (acc *AuthCodeCreate) createSpec() (*AuthCode, *sqlgraph.CreateSpec) {
	var (
		_node = &AuthCode{config: acc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: authcode.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: authcode.FieldID,
			},
		}
	)
	if value, ok := acc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: authcode.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := acc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: authcode.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := acc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: authcode.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := acc.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: authcode.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if value, ok := acc.mutation.Value(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: authcode.FieldValue,
		})
		_node.Value = value
	}
	if value, ok := acc.mutation.ClientID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: authcode.FieldClientID,
		})
		_node.ClientID = value
	}
	if value, ok := acc.mutation.Scopes(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: authcode.FieldScopes,
		})
		_node.Scopes = value
	}
	if value, ok := acc.mutation.ResponseType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: authcode.FieldResponseType,
		})
		_node.ResponseType = value
	}
	if value, ok := acc.mutation.Nonce(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: authcode.FieldNonce,
		})
		_node.Nonce = value
	}
	if value, ok := acc.mutation.RedirectURI(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: authcode.FieldRedirectURI,
		})
		_node.RedirectURI = value
	}
	if value, ok := acc.mutation.Expiry(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: authcode.FieldExpiry,
		})
		_node.Expiry = value
	}
	if value, ok := acc.mutation.CodeChallenge(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: authcode.FieldCodeChallenge,
		})
		_node.CodeChallenge = value
	}
	if value, ok := acc.mutation.CodeChallengeMethod(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: authcode.FieldCodeChallengeMethod,
		})
		_node.CodeChallengeMethod = value
	}
	return _node, _spec
}

// AuthCodeCreateBulk is the builder for creating many AuthCode entities in bulk.
type AuthCodeCreateBulk struct {
	config
	builders []*AuthCodeCreate
}

// Save creates the AuthCode entities in the database.
func (accb *AuthCodeCreateBulk) Save(ctx context.Context) ([]*AuthCode, error) {
	specs := make([]*sqlgraph.CreateSpec, len(accb.builders))
	nodes := make([]*AuthCode, len(accb.builders))
	mutators := make([]Mutator, len(accb.builders))
	for i := range accb.builders {
		func(i int, root context.Context) {
			builder := accb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AuthCodeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, accb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, accb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, accb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (accb *AuthCodeCreateBulk) SaveX(ctx context.Context) []*AuthCode {
	v, err := accb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (accb *AuthCodeCreateBulk) Exec(ctx context.Context) error {
	_, err := accb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (accb *AuthCodeCreateBulk) ExecX(ctx context.Context) {
	if err := accb.Exec(ctx); err != nil {
		panic(err)
	}
}
